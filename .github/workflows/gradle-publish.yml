# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  workflow_dispatch:

  release:
    types: [created]

jobs:
  gradle:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: 11

    - name: Build with Gradle [Macos]
      uses: eskatos/gradle-command-action@v1
      if: ${{ startsWith(matrix.os, 'macos') }}
      with:
        arguments: clean build -x :jsNodeTest -i -s

    - name: Build with Gradle [Windows]
      uses: eskatos/gradle-command-action@v1
      if: ${{ startsWith(matrix.os, 'macos') }}
      with:
        arguments: clean build -x :jsNodeTest -x compilePosix -i -s
      
    - name: Prepare publications
      if: ${{ startsWith(matrix.os, 'macos') }}
      env:
        GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
        GPG_RINGFILE: ${{ secrets.GPG_RINGFILE }}
        GPG_SECRET_CONTENT: ${{ secrets.GPG_KEY_CONTENTS }}
      run: |
        sudo bash -c "echo '$GPG_SECRET_CONTENT' | base64 -d > '$GPG_RINGFILE'"
        bash -c "echo 'signing.keyId=$GPG_KEY_ID' >> gradle.properties"
        bash -c "echo 'signing.password=$GPG_PASSWORD' >> gradle.properties"
        bash -c "echo 'signing.secretKeyRingFile=$GPG_RINGFILE' >> gradle.properties"

    - uses: eskatos/gradle-command-action@v1
      name: Publish targets to maven
      with:
        arguments: publish -PapiKey=${{ secrets.SONOTYPE_TOKEN }}
      if: ${{ startsWith(matrix.os, 'macos') }}

    - uses: eskatos/gradle-command-action@v1
      name: Publish targets to maven
      with:
        arguments: publishMingwX64PublicationToMavenRepository -s -i -x compilePosix -PapiKey=${{ secrets.SONOTYPE_TOKEN }}
      if: ${{ startsWith(matrix.os, 'windows') }}
